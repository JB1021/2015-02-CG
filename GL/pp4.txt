#include <windows.h>

#include <iostream>

#include <stdlib.h>

#include <GL/glut.h>

#include "imageloader.h"


GLuint _textureId[3];

GLUquadric *quad;
GLUquadric *quad2;
GLUquadric *quad3;

float rotat;
float rotat2;

GLuint loadTexture(Image* image) {

  GLuint textureId;

  glGenTextures(1, &textureId); 
  glBindTexture(GL_TEXTURE_2D, textureId); 

  glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, image->width, image->height, 0, GL_RGB, GL_UNSIGNED_BYTE, image->pixels);
  return textureId; 

}

void SetupRC() {

  glEnable(GL_DEPTH_TEST);
  glEnable(GL_COLOR_MATERIAL);
  glEnable(GL_TEXTURE_2D);

  quad = gluNewQuadric();
  quad2 = gluNewQuadric();
  quad3 = gluNewQuadric();

  Image* image = loadBMP("texture.bmp");
  GLuint textureId;
   _textureId[0] = loadTexture(image);

  image = loadBMP("test.bmp");
  _textureId[1] = loadTexture(image);

  image = loadBMP("mercury.bmp");
  _textureId[2] = loadTexture(image);
  delete image;

}


void ChangeSize(int w, int h) {
  GLfloat fAspect;
  glViewport(0, 0, w, h);
  fAspect = (GLfloat)w / (GLfloat)h;
  glMatrixMode(GL_PROJECTION);
  glLoadIdentity();
  gluPerspective(60.0f, fAspect, 1.0f, 500.0f);
}


void RenderScene() {
  static GLfloat fElect1 = 0.0f;
  static GLfloat fElect2 = 0.0f;

  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
  
  glMatrixMode(GL_MODELVIEW);
  glLoadIdentity();

  glBindTexture(GL_TEXTURE_2D, _textureId[0]);
  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

  
  glPushMatrix();
  {
    glTranslatef(0.0f, 0.0f, -60.0f);

    glRotatef(fElect1, 0.0f, 1.0f, 0.0f);
    glRotatef(270.0f, 1.0f, 0.0f, 0.0f);

    gluQuadricTexture(quad, 1);
    gluSphere(quad, 2, 20, 20);
  }
  glPopMatrix();


  glBindTexture(GL_TEXTURE_2D, _textureId[1]);
  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
  
  glPushMatrix();
  {
    glTranslatef(0.0f, 0.0f, -60.0f);

    glRotatef(fElect1, 0.0f, 1.0f, 0.0f);
    glTranslatef(25.0f, 0.0f, 0.0f);

    gluQuadricTexture(quad2, 1);
    gluSphere(quad2, 2, 20, 20);
  }
  glPopMatrix();


  glBindTexture(GL_TEXTURE_2D, _textureId[2]);
  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);

  //glRotatef(45.0f, 0.0f, 0.0f, 1.0f);

  glPushMatrix();
  {
    glTranslatef(0.0f, 0.0f, -60.0f);

    glRotatef(fElect1, 0.0f, 1.0f, 0.0f);
    glTranslatef(25.0f, 0.0f, 0.0f);

    glRotatef(fElect2, 0.0f, 0.0f, 1.0f);
    glTranslatef(10.0f, 0.0f, 0.0f);

    gluQuadricTexture(quad3, 1);
    gluSphere(quad3, 2, 20, 20);
  }
  glPopMatrix();
  

  fElect1 += 10.0f;
  fElect2 += 20.0f;

  if (fElect1 > 360.0f)
    fElect1 = 0.0f;
  if (fElect2 > 360.0f)
    fElect2 = 0.0f;
  
  glutSwapBuffers();
}

void TimeFunc(int value)

{
    glutPostRedisplay();
    glutTimerFunc(100,TimeFunc,0);

}

int main(void) {

  glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
  glutInitWindowSize(800, 800);
  glutCreateWindow("textureAtom");
  SetupRC();
  glutTimerFunc(25,TimeFunc,0);
  glutDisplayFunc(RenderScene);
  glutReshapeFunc(ChangeSize);
  glutMainLoop();

  return 0;
}